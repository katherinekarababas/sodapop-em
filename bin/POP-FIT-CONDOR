#!/usr/bin/env python

'POP-FIT-CONDOR -- writes dag to perform population inference in parallel'
__usage__ = 'POP-FIT-CONDOR /path/to/rundir/ /path/to/sodapop/ likedata1.csv likedata2.csv ... [-n 1e4 -m 50 -P /path/to/eos/metadata.csv -e /path/to/eosdir/ -c /path/to/crust.csv -s "flat" "mmin,mmax" -o /path/for/joint/post.csv -v]'
__author__ = 'Philippe Landry (pgjlandry@gmail.com)'
__date__ = '12-2020'

from argparse import ArgumentParser
import numpy as np
import time
import subprocess
import os
import sodapop.populations as pop

parser = ArgumentParser(description=__doc__)
parser.add_argument('rundir',type=str)
parser.add_argument('repopath',type=str)
parser.add_argument('likedata',nargs="*")
parser.add_argument('-C', '--clas', help='bns or nsbh classification of each event, DEFAULT="bns bns bns ..."', default=False, nargs='+')
parser.add_argument('-c', '--col', help='name of mass1, mass2, distance and likelihood data columns to use, DEFAULT="m1 m2 dL likelihood"', default=['m1','m2','dL','likelihood'], nargs='+')
parser.add_argument('-l', '--nlike', help='number of likelihood samples to use, DEFAULT=5e3', default=5e3, type=float)
parser.add_argument('-p', '--popmod', help='name of BNS and NSBH population models, DEFAULT="unif_m1m2 unif_m1m2_qpair"', default=["unif_m1m2","unif_m1m2_qpair"], nargs=2)
parser.add_argument('-P', '--priors', help='prior distribution and hyperparameters for each population parameter, DEFAULT="mmin,mmax+flat12,0.,1.,0.,1."', default="mmin,mmax+flat12,0.,1.,0.,1.", nargs='+')
parser.add_argument('-F', '--fixed', help='fixed population parameter values (e.g. mmin,1.0), DEFAULT=False', default=False, nargs='+')
parser.add_argument('-D', '--distprior', help='prior distribution for the distance, DEFAULT="quad,0.,1000."', default="quad,0.,1000.")
parser.add_argument('-n', '--npop', help='number of population model realizations to initialize walkers with, DEFAULT=1e4', default=1e4, type=float)
parser.add_argument('-B', '--bhpop', help='population parameters for fixed BH mass model, DEFAULT=2. 3. 30.', default=[2.,3.,30.], nargs='+')
parser.add_argument('-f', '--selfunc', help='name of selection function, DEFAULT=False', default=False)
parser.add_argument('-S', '--selpriors', help='ranges in m1,m2 and dL for integrating selection function, DEFAULT="0.5,30.,0.5,30.,0.,1000."', default="0.5,30.,0.5,30.,0.,1000.")
parser.add_argument('-s', '--nsel', help='number of samples to use for integrating selection function, DEFAULT=5000', default=5e3, type=float)
parser.add_argument('-t', '--npost', help='target number of posterior samples, DEFAULT=10000', default=1e4, type=float)
parser.add_argument('-w', '--nwalk', help='number of MCMC chains per job, DEFAULT=AUTO', default=False)
parser.add_argument('-b', '--nburn', help='number of burn-in samples, DEFAULT=1000', default=1e3, type=float)
parser.add_argument('-o', '--outdir', help='directory to output population parameter samples into, DEFAULT="./"', default="./")
parser.add_argument('-v', '--verbose', action='store_true', default=False)
args = parser.parse_args()

whoami = os.popen('whoami').read()

###

REPO_PATH = args.repopath
RUN_PATH = args.rundir
DAG_PATH = args.rundir+'/'+'POP-FIT.dag'
OUTDIR = args.outdir

LIKESTR = ','.join(args.likedata)
CLASSTR = ','.join(args.clas)
COLSTR = ','.join(args.col)
POPMODSTR = ','.join(args.popmod)
BHPOPSTR = ','.join(args.bhpop)
PRIORSTR = '='.join(args.priors)

MAIN_POP_MOD = args.popmod[0]
MAIN_POP_PARAMS = (pop.get_pop_params(MAIN_POP_MOD)).split(',')
N_POP_PARAMS = len(MAIN_POP_PARAMS)

if args.nwalk: N_WALKERS_PER_JOB = int(args.nwalk)
else: N_WALKERS_PER_JOB = 2*N_POP_PARAMS+1

N_POP = int(args.npop)
N_JOBS = int(N_POP/N_WALKERS_PER_JOB)

N_POST = int(args.npost)
N_POST_PER_JOB = int(1+N_POST/N_JOBS)

PRIOR_OUTPATH = OUTDIR+'/'+MAIN_POP_MOD+'_prior.csv'
POST_OUTPATH = OUTDIR+'/'+MAIN_POP_MOD+'.csv'

if args.fixed and args.fixed != ['False']:
	fixed_out = ' '.join(args.fixed)
	fixed_str = '+'.join(args.fixed)
else:
	fixed_out = False
	fixed_str = False

def post_outpath_batch(post_outpath,job):

	path = os.path.dirname(post_outpath)+'/'+os.path.basename(post_outpath).split('.')[0]+str(job)+'.csv'

	return path

###

param_named_shapes = {}
param_named_vals = {}
for prior in args.priors:
	
	param_names_str = prior.split('+')[0]
	param_names = param_names_str.split(',')
	prior_str = prior.split('+')[1]
	prior_shape = prior_str.split(',')[0]
	if prior_shape == 'flat12' or prior_shape == 'flat123' or prior_shape == 'flat1234': prior_shape = 'flat'
	param_vals = prior_str.split(',')[1:]
	
	for i,param_name in enumerate(param_names):
		param_named_shapes[param_name] = prior_shape
		param_named_vals[param_name] = ','.join(param_vals[2*i:2*i+2])

###

with open(DAG_PATH,'w') as outfile:
	outfile.write('# POP-FIT-CONDOR {0} {1} {2} -C {3} -c {4} -l {5} -p {6} -P {7} -F {18} -D {8} -n {9} -B {10} -f {11} -S {12} -s {13} -t {14} -w {15} -b {16} -o {17} -v\n'.format(RUN_PATH, REPO_PATH, ' '.join(args.likedata), ' '.join(args.clas), ' '.join(args.col), int(args.nlike), ' '.join(args.popmod), ' '.join(args.priors), args.distprior, N_POP, ' '.join(args.bhpop), args.selfunc, args.selpriors, int(args.nsel), N_POST, N_WALKERS_PER_JOB, int(args.nburn), args.outdir, fixed_out))
	outfile.write('# this dag produced with the preceding command\n\n')
	
execs = ['sample-pop-params', 'infer-pop-params']
opts = ['\"$(popmodel) $(numsamps) $(priorstr) $(fixedstr) $(outpath)\"','\"$(popparams) $(likestr) $(classtr) $(colstr) $(likesamps) $(popmodelstr) $(priorstr) $(distprior) $(bhparams) $(selectfunc) $(selectpriorstr) $(selectsamps) $(numpost) $(numwalkers) $(numburnin) $(outpath) $(batch) $(fixedstr)\"']

for i,xec in enumerate(execs):
	with open(RUN_PATH+xec+'.sub','w') as outfile:
		outfile.write('universe = vanilla\n')
		outfile.write('executable = {0}/bin/{1}.sh\n'.format(REPO_PATH,xec))
		outfile.write('arguments = {0}\n'.format(opts[i]))
		outfile.write('output = {0}/{1}.out\n'.format(RUN_PATH,xec))
		outfile.write('error = {0}/{1}.err\n'.format(RUN_PATH,xec))
		outfile.write('log = {0}/{1}.log\n'.format(RUN_PATH,xec))
		outfile.write('getenv = True\n')
		outfile.write('accounting_group = ligo.dev.o3.cbc.bayesianpopulations.parametric\n')
		outfile.write('accounting_group_user = {0}\n'.format(whoami))
		outfile.write('queue 1\n')

j = 0
with open(DAG_PATH,'a') as outfile:

	outfile.write('JOB {0} {1}/sample-pop-params.sub\n'.format(j,RUN_PATH))
	outfile.write('VARS {0} popmodel=\"{1}\" numsamps=\"{2}\" priorstr=\"{3}\" fixedstr=\"{4}\" outpath=\"{5}\"\n'.format(j,MAIN_POP_MOD,N_POP,PRIORSTR,fixed_str,PRIOR_OUTPATH))
	outfile.write('RETRY {0} 1\n\n'.format(j))

	batch = 0
	for j in range(1,N_JOBS+1):

		outfile.write('JOB {0} {1}/infer-pop-params.sub\n'.format(j,RUN_PATH))
		outfile.write('VARS {0} popparams=\"{1}\" likestr=\"{2}\" classtr=\"{3}\" colstr=\"{4}\" likesamps=\"{5}\" popmodelstr=\"{6}\" priorstr=\"{7}\" distprior=\"{8}\" bhparams=\"{9}\" selectfunc=\"{10}\" selectpriorstr=\"{11}\" selectsamps=\"{12}\" numpost=\"{13}\" numwalkers=\"{14}\" numburnin=\"{15}\" outpath=\"{16}\" batch=\"{17}\" fixedstr=\"{18}\"\n'.format(j,PRIOR_OUTPATH,LIKESTR,CLASSTR,COLSTR,int(args.nlike), POPMODSTR,PRIORSTR,args.distprior,BHPOPSTR,args.selfunc,args.selpriors,int(args.nsel),N_POST_PER_JOB, N_WALKERS_PER_JOB,int(args.nburn),post_outpath_batch(POST_OUTPATH,j),batch,fixed_str))
		outfile.write('RETRY {0} 1\n'.format(j))
		outfile.write('PARENT 0 CHILD {0}\n\n'.format(j))
		batch += N_WALKERS_PER_JOB

time.sleep(5)
subprocess.call('condor_submit_dag {0}'.format(DAG_PATH),shell=True)	
