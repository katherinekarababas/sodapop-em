#!/usr/bin/env python

'SAMPLE-POP-PARAMS -- sample population model parameters'
__usage__ = 'sample-pop-params pop_model [-p param_prior_shape,hypparam1,hypparam2 param_prior_shape,hypparam1,hypparam2 ... -o /path/to/output.csv -n 1e4 -v]'
__author__ = 'Philippe Landry (pgjlandry@gmail.com)'
__date__ = '02-2021'

from argparse import ArgumentParser
import numpy as np
import os
import sodapop.populations as pop
import sodapop.parameters as params

parser = ArgumentParser(description=__doc__)
parser.add_argument('popmodel',type=str)
parser.add_argument('-d', '--delim', help='delimiter for data file, DEFAULT=","', default=',')
parser.add_argument('-n', '--numsamps', help='number of samples to draw, DEFAULT=1000', default=1000, type=float)
parser.add_argument('-p', '--priors', help='prior distribution and hyperparameters for each population parameter, DEFAULT="mmax+flat,0.,1."', default="mmax+flat,0.,1.", type=str, nargs='+')
parser.add_argument('-F', '--fixed', help='fixed population parameter values (e.g. mmin,1.0), DEFAULT=False', default=False, nargs='+')
parser.add_argument('-o', '--outpath', help='path for output reweighted samples, DEFAULT=AUTO', default=False)
parser.add_argument('-g', '--gridpts', help='number of grid points to build prior on, DEFAULT=10000', default=10000, type=float)
parser.add_argument('-v', '--verbose', action='store_true', default=False)
args = parser.parse_args()

if args.outpath: out_path = args.outpath
else: out_path = '{0}_prior.csv'.format(args.popmodel)

GRID_PTS = int(args.gridpts)

prior_keys = []
param_names = []
prior_funcs = {}
hyp_params = {}
for prior_str in args.priors:

	prior_key = prior_str.split('+')[0]
	prior_keys += [prior_key]
	
	param_names += [item for item in prior_key.split(',')]
	prior_funcs[prior_key] = (prior_str.split('+')[1]).split(',')[0]
	hyp_params[prior_key] = [float(val) for val in (prior_str.split('+')[1]).split(',')[1:]]

fixed_param_names = []
fixed_hyp_params = {}
if args.fixed and args.fixed != ['False']:
	for fixed_str in args.fixed:
		fixed_param_name, fixed_hyp_param = fixed_str.split(',')
		fixed_param_names += [fixed_param_name]
		fixed_hyp_params[fixed_param_name] = float(fixed_hyp_param)

full_param_names = param_names + fixed_param_names

num_samps = int(args.numsamps)

# get population model

pop_param_names = pop.get_pop_params(args.popmodel).split(',')

assert(set(full_param_names) == set(pop_param_names)) # check that prior prescribed for each hyperparameter

# sample from parameter priors

samps = {}
for key in prior_keys:

	key_names = key.split(',')
	num_names = len(key_names)
	
	grid_list = []
	for i in range(num_names):
		if key_names[i] == 'alpha' or key_names[i] == 'beta':
			grid_list += [params.flat(GRID_PTS,-12.,12.)]
		else:	
			grid_list += [params.flat(GRID_PTS,0.,5.)]
	
	unif_grid = [[grid[j] for grid in grid_list] for j in range(GRID_PTS)]

	prior_func = params.get_param_prior_func(prior_funcs[key])
	prior_wts = [prior_func(*grid_pt,*hyp_params[key]) for grid_pt in unif_grid]
	
	samps_idxs = np.random.choice(range(GRID_PTS),num_samps,True,prior_wts/np.sum(prior_wts))
	
	for i,key_name in enumerate(key_names):
		samps[key_name] = [unif_grid[k][i] for k in samps_idxs]

for param in fixed_param_names:
	samps[param] = np.full(num_samps,fixed_hyp_params[param])
	
samps_out = []
for param in pop_param_names:
	samps_out += [samps[param]]

# save parameter samples

param_samps = np.column_stack(samps_out)
col_names = ','.join(pop_param_names)
np.savetxt(out_path,param_samps,header=col_names,comments='',delimiter=',')
